BOOL  _TrackMouseEvent(   LPTRACKMOUSEEVENT lpEventTrack);

HKL  ActivateKeyboardLayout(   HKL  hkl,   UINT Flags);

ATOM  AddAtom(   LPCTSTR lpString);

BOOL  AddClipboardFormatListener(   HWND hwnd);

BOOL APIENTRY AddERExcludedApplication(   LPCTSTR szApplication);

HANDLE AddFontMemResourceEx(   PVOID pbFont,   DWORD cbFont,   PVOID pdv,   DWORD *pcFonts);

int AddFontResource(   LPCTSTR lpszFilename);

int AddFontResourceEx(   LPCTSTR lpszFilename,   DWORD   fl,   PVOID   pdv);

BOOL AddForm(   HANDLE hPrinter,   DWORD  Level,   LPBYTE pForm);

BOOL AddJob(    HANDLE  hPrinter,    DWORD   Level,   LPBYTE  pData,    DWORD   cbBuf,   LPDWORD pcbNeeded);

BOOL AddMonitor(   LPTSTR pName,   DWORD  Level,   LPBYTE pMonitors);

    HANDLE hSession,    LPNTMS_GUID lpMediaTypeId,    LPNTMS_GUID lpLibId);

BOOL AddPort(   LPTSTR pName,   HWND   hWnd,   LPTSTR pMonitorName);

HANDLE AddPrinter(   LPTSTR *pName,   DWORD  Level,   LPBYTE pPrinter);

BOOL AddPrinterConnection(   LPTSTR pName);

BOOL AddPrinterDriver(   LPTSTR pName,   DWORD  Level,   LPBYTE pDriverInfo);

BOOL AddPrinterDriverEx(      LPTSTR pName,      DWORD  Level,   LPBYTE pDriverInfo,      DWORD  dwFileCopyFlags);

BOOL AddPrintProcessor(   LPTSTR pName,   LPTSTR pEnvironment,   LPTSTR pPathName,   LPTSTR pPrintProcessorName);

BOOL AddPrintProvidor(   LPTSTR pName,   DWORD  Level,   LPBYTE pProviderInfo);

BOOL  AddSIDToBoundaryDescriptor(   HANDLE *BoundaryDescriptor,      PSID   RequiredSid);

DWORD  AddUsersToEncryptedFile(   LPCWSTR                      lpFileName,   PENCRYPTION_CERTIFICATE_LIST pUsers);

PVOID  AddVectoredExceptionHandler(   ULONG                       FirstHandler,   PVECTORED_EXCEPTION_HANDLER VectoredHandler);

BOOL  AdjustWindowRect(   LPRECT lpRect,      DWORD  dwStyle,      BOOL   bMenu);

BOOL  AdjustWindowRectEx(   LPRECT lpRect,      DWORD  dwStyle,      BOOL   bMenu,      DWORD  dwExStyle);

LONG AdvancedDocumentProperties(    HWND     hWnd,    HANDLE   hPrinter,    LPTSTR   pDeviceName,   PDEVMODE pDevModeOutput,    PDEVMODE pDevModeInput);

HRESULT __stdcall AlertSamplesAvailFunc(void);

     HANDLE hSession,     LPNTMS_GUID lpMediaPool,     LPNTMS_GUID lpPartId,    LPNTMS_GUID lpMediaId,     DWORD dwOptions,     DWORD dwTimeout,    LPNTMS_ALLOCATION_INFORMATION lpAllocateInformation);

BOOL  AllocateUserPhysicalPages(      HANDLE     hProcess,   PULONG_PTR NumberOfPages,     PULONG_PTR UserPfnArray);

BOOL  AllocateUserPhysicalPagesNuma(      HANDLE     hProcess,   PULONG_PTR NumberOfPages,     PULONG_PTR PageArray,      DWORD      nndPreferred);

BOOL  AllocConsole(void);

BOOL  AllowSetForegroundWindow(   DWORD dwProcessId);

BOOL AlphaBlend(   HDC           hdcDest,   int           xoriginDest,   int           yoriginDest,   int           wDest,   int           hDest,   HDC           hdcSrc,   int           xoriginSrc,   int           yoriginSrc,   int           wSrc,   int           hSrc,   BLENDFUNCTION ftn);

BOOL AngleArc(   HDC   hdc,   int   X,   int   Y,   DWORD dwRadius,   FLOAT eStartAngle,   FLOAT eSweepAngle);

BOOL AnimatePalette(         HPALETTE     hpal,         UINT         iStartIndex,         UINT         cEntries,   const PALETTEENTRY *ppe);

BOOL  AnimateWindow(   HWND  hwnd,   DWORD dwTime,   DWORD dwFlags);

BOOL  AnyPopup(void);

VOID CALLBACK APCProc(   ULONG_PTR dwParam);

BOOL  AppendMenu(       HMENU    hMenu,       UINT     uFlags,       UINT_PTR uIDNewItem,   LPCTSTR  lpNewItem);

VOID  ApplicationRecoveryFinished(   BOOL bSuccess);

HRESULT  ApplicationRecoveryInProgress(   PBOOL pbCanceled);

BOOL Arc(   HDC hdc,   int nLeftRect,   int nTopRect,   int nRightRect,   int nBottomRect,   int nXStartArc,   int nYStartArc,   int nXEndArc,   int nYEndArc);

BOOL ArcTo(   HDC hdc,   int nLeftRect,   int nTopRect,   int nRightRect,   int nBottomRect,   int nXRadial1,   int nYRadial1,   int nXRadial2,   int nYRadial2);

BOOL  AreFileApisANSI(void);

UINT  ArrangeIconicWindows(   HWND hWnd);

BOOL  AssignProcessToJobObject(   HANDLE hJob,   HANDLE hProcess);

BOOL  AttachConsole(   DWORD dwProcessId);

BOOL  AttachThreadInput(   DWORD idAttach,   DWORD idAttachTo,   BOOL  fAttach);

BOOL  AvQuerySystemResponsiveness(    HANDLE AvrtHandle,   PULONG SystemResponsivenessValue);

BOOL  AvRevertMmThreadCharacteristics(   HANDLE AvrtHandle);

BOOL  AvRtCreateThreadOrderingGroup(      PHANDLE        Context,       PLARGE_INTEGER Period,    GUID           *ThreadOrderingGuid,   PLARGE_INTEGER Timeout);

BOOL  AvRtCreateThreadOrderingGroupEx(      PHANDLE        Context,       PLARGE_INTEGER Period,    GUID           *ThreadOrderingGuid,   PLARGE_INTEGER Timeout,       LPCTSTR        TaskName);

BOOL  AvRtDeleteThreadOrderingGroup(   HANDLE Context);

BOOL  AvRtJoinThreadOrderingGroup(   PHANDLE Context,    GUID    *ThreadOrderingGuid,    BOOL    Before);

BOOL  AvRtLeaveThreadOrderingGroup(   HANDLE Context);

BOOL  AvRtWaitOnThreadOrderingGroup(   HANDLE Context);

HANDLE  AvSetMmMaxThreadCharacteristics(      LPCTSTR FirstTask,      LPCTSTR SecondTask,   LPDWORD TaskIndex);

HANDLE  AvSetMmThreadCharacteristics(      LPCTSTR TaskName,   LPDWORD TaskIndex);

BOOL  AvSetMmThreadPriority(   HANDLE        AvrtHandle,   AVRT_PRIORITY Priority);

BOOL BackupEventLog(   HANDLE  hEventLog,   LPCTSTR lpBackupFileName);

BOOL BackupRead(    HANDLE  hFile,   LPBYTE  lpBuffer,    DWORD   nNumberOfBytesToRead,   LPDWORD lpNumberOfBytesRead,    BOOL    bAbort,    BOOL    bProcessSecurity,   LPVOID  *lpContext);

BOOL BackupSeek(    HANDLE  hFile,    DWORD   dwLowBytesToSeek,    DWORD   dwHighBytesToSeek,   LPDWORD lpdwLowByteSeeked,   LPDWORD lpdwHighByteSeeked,    LPVOID  *lpContext);

BOOL BackupWrite(    HANDLE  hFile,    LPBYTE  lpBuffer,    DWORD   nNumberOfBytesToWrite,   LPDWORD lpNumberOfBytesWritten,    BOOL    bAbort,    BOOL    bProcessSecurity,   LPVOID  *lpContext);

BOOL  Beep(   DWORD dwFreq,   DWORD dwDuration);

HDWP  BeginDeferWindowPos(   int nNumWindows);

     HANDLE hSession,    LPHANDLE lpDetectHandle);

HDC BeginPaint(    HWND          hwnd,   LPPAINTSTRUCT lpPaint);

BOOL BeginPath(   HDC hdc);

HANDLE  BeginUpdateResource(   LPCTSTR pFileName,   BOOL    bDeleteExistingResources);

BOOL  BindIoCompletionCallback(   HANDLE                          FileHandle,   LPOVERLAPPED_COMPLETION_ROUTINE Function,   ULONG                           Flags);

BOOL BitBlt(   HDC   hdcDest,   int   nXDest,   int   nYDest,   int   nWidth,   int   nHeight,   HDC   hdcSrc,   int   nXSrc,   int   nYSrc,   DWORD dwRop);

BOOL  BlockInput(   BOOL fBlockIt);

BOOL  BringWindowToTop(   HWND hWnd);

long  BroadcastSystemMessage(          DWORD   dwFlags,   LPDWORD lpdwRecipients,          UINT    uiMessage,          WPARAM  wParam,          LPARAM  lParam);

long  BroadcastSystemMessageEx(          DWORD    dwFlags,   LPDWORD  lpdwRecipients,          UINT     uiMessage,          WPARAM   wParam,          LPARAM   lParam,     PBSMINFO pBSMInfo);

ULONG  BufferCallback(   PEVENT_TRACE_LOGFILE Buffer);

BOOL  BuildCommDCB(    LPCTSTR lpDef,   LPDCB   lpDCB);

BOOL  BuildCommDCBAndTimeouts(    LPCTSTR        lpDef,   LPDCB          lpDCB,   LPCOMMTIMEOU